package ca.uwo.eng.sel.cepsim.gen

import org.junit.runner.RunWith
import org.mockito.Mockito._
import org.scalatest.junit.JUnitRunner
import org.scalatest.mock.MockitoSugar
import org.scalatest.{FlatSpec, Matchers}

import scala.concurrent.duration._

@RunWith(classOf[JUnitRunner])
class LimitedGeneratorTest extends FlatSpec
  with Matchers
  with MockitoSugar {


  "A LimitedGenerator" should "limit tuples generated by a generator" in {

    val gen = new Generator() {
      override def doGenerate(interval: Double): Double = 100
    }

    gen.generate(100, 50) should be (50.0)
  }

  it should "not lose any generated event" in {
    val gen = new Generator() {
      override def doGenerate(interval: Double): Double = if (invocations == 0) 90 else 20
    }

    gen.generate(100, 50) should be (50.0)
    gen.generate(100, 50) should be (50.0)
    gen.nonProcessed should be (10.0)
  }

  it should "return the generated value if it is not over the limit" in {
    val gen = new Generator() {
      override def doGenerate(interval: Double): Double = if (invocations == 0) 40 else 20
    }

    gen.generate(100, 50) should be (40.0)
    gen.generate(100, 50) should be (20.0)
    gen.nonProcessed should be (0.0)
  }

  it should "correctly calculate the average generation rate" in  {
    val gen = new Generator() {
      override def doGenerate(interval: Double): Double = if (invocations == 0) 60 else 20
    }

    gen.generate(100, 50) should be ( 50.0)
    gen.generate(100, 50) should be ( 30.0)
    gen.nonProcessed should be (  0.0)
    gen.average      should be (400.0)

  }


}
