package ca.uwo.eng.sel.cepsim.history

import ca.uwo.eng.sel.cepsim.event.EventSet
import ca.uwo.eng.sel.cepsim.query.{EventConsumer, EventProducer, Vertex, WindowedOperator}

/**
  * Trait that represents an important simulation event. These events composes the execution history
  * and are used as input to metrics calculation. A simulation event is different from a CEP event,
  * as it is an internal class used to represent what happened during a simulation.
  */
trait SimEvent extends Ordered[SimEvent] {

  /** Vertex that originated the event. */
  def v: Vertex

  /** Start timestamp. */
  def from: Double

  /** End timestamp. */
  def to: Double

  /** EventSet of the simulation event. The specific meaning of this set depends on the type of simulation event. */
  def es: EventSet

  /** Timestamp of the event. By default, the end timestamp is considered as the simulation event timestamp. */
  def at: Double = to

  /** Number of events. The specific meaning of this number depends on the type of event. */
  def quantity: Double = es.size


  def compare(that: SimEvent): Int = {
    var comp = this.from.compare(that.from)
    if (comp == 0) comp = this.to.compare(that.to)
    if (comp == 0) comp = this.v.compare(that.v)

    comp
  }
}

/**
  * Represents events generated by a Generator associated with an EventProducer.
  *
  * @param v Event Producer.
  * @param from Start timestamp.
  * @param to Final timestamp.
  * @param es Event set generated.
  */
case class Generated (val v: EventProducer, val from: Double, val to: Double, val es: EventSet) extends SimEvent


/**
  * Represents events produced (emit) by an OutputVertex (EventProducer or any Operator).
  *
  * @param v Vertex emitting the events.
  * @param from Start timestamp.
  * @param to Final timestamp.
  * @param es Event set that has been emit.
  */
case class Produced(val v: Vertex, val from: Double, val to: Double, val es: EventSet) extends SimEvent

/**
  * Represents events accumulated by a WindowedOperator.
  *
  * @param v WindowedOperator accumulating the events.
  * @param from Start timestamp.
  * @param to Final timestamp.
  * @param slot Slot number on which events have been accumulated.
  * @param es Event set that has been accumulated.
  */
case class WindowAccumulated(val v: WindowedOperator, val from: Double, val to: Double, val slot: Int,
                             val es: EventSet) extends SimEvent

/**
  * Represents events consumed by an EventConsumer.
  *
  * @param v EventConsumer consuming the events.
  * @param from Start timestamp.
  * @param to Final timestamp.
  * @param es Event set that has been consumed.
  */
case class Consumed (val v: EventConsumer, val from: Double, val to: Double, val es: EventSet) extends SimEvent
