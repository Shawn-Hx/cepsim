package ca.uwo.eng.sel.cepsim.gen

import org.junit.runner.RunWith
import org.mockito.Mockito._
import org.scalatest.junit.JUnitRunner
import org.scalatest.mock.MockitoSugar
import org.scalatest.{FlatSpec, Matchers}

import scala.concurrent.duration._

@RunWith(classOf[JUnitRunner])
class LimitedGeneratorTest extends FlatSpec
  with Matchers
  with MockitoSugar {


  "A LimitedGenerator" should "limit tuples generated by a generator" in {
    val gen = mock[Generator]
    when(gen.generate()).thenReturn(100)

    val limitedGen = LimitedGenerator(gen, 50, 100 milliseconds)
    limitedGen.generate should be (50)
  }

  it should "not lose any generated event" in {
    val gen = mock[Generator]
    when(gen.generate()).thenReturn(90, 20)

    val limitedGen = LimitedGenerator(gen, 50, 100 milliseconds)
    limitedGen.generate should be (50)
    limitedGen.generate should be (50)
    limitedGen.nonProcessed should be (10)
  }

  it should "return the generated value if it is not over the limit" in {
    val gen = mock[Generator]
    when(gen.generate()).thenReturn(40, 20)

    val limitedGen = LimitedGenerator(gen, 50, 100 milliseconds)
    limitedGen.generate should be (40)
    limitedGen.generate should be (20)
    limitedGen.nonProcessed should be (0)

  }

  it should "correctly calculate the average generation rate" in  {
    val gen = mock[Generator]
    when(gen.generate()).thenReturn(60, 20)

    val limitedGen = LimitedGenerator(gen, 50, 100 milliseconds)
    limitedGen.generate should be (50)
    limitedGen.generate should be (30)
    limitedGen.nonProcessed should be (0)
    limitedGen.average should be (400.0)

  }


}
