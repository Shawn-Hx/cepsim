package ca.uwo.eng.sel.cepsim.gen

import scala.concurrent.duration.Duration

/** LimitedGenerator companion object */
private[gen] object LimitedGenerator {
  def apply(gen: Generator, limit: Int, samplingInterval: Duration) =
    new LimitedGenerator(gen, limit, samplingInterval)
}


/**
  * Generator that limits the number of events generated by other generators.
  * @param gen Encapsulated generator.
  * @param limit Event limit.
  */
private[gen] class LimitedGenerator(val gen: Generator, val limit: Int, samplingInterval: Duration)
  extends AbstractGenerator(samplingInterval) {

  /** Number of accumulated events that have not been processed. */
  private var accumulated = 0

  override def doGenerate(): Int = {
    accumulated += gen.generate()
    val toReturn = accumulated.min(limit)
    accumulated -= toReturn

    toReturn
  }

  /**
    * Obtain the number of events that have not been processed.
    * @return the number of events that have not been processed.
    */
  def nonProcessed: Int = accumulated

}
